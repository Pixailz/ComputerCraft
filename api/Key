dir = "/key"

LEN = 2
EXPOSANT = Bigint.new(3)

function byteToLong(text)
	local	number = 0
	for i = 1, #text do
		number = number * 2 ^ 8
		number = number + string.byte(text:sub(i, i))
	end
	return number
end

function longToByte(number)
	local	text = ""

	while number > 0 do
		text = string.char(bit.band(number, 0xff))..text
		number = number / 2 ^ 8
	end
	return text
end

-- function pow(n, p, m)
-- 	return math.pow(n, p) % m
-- end

function get(path)
	if not fs.exists(path) then
		return
	end

	local h = fs.open(path, "r")

	public_key = h.readLine()
	private_key = h.readLine()

	return Bigint.new(public_key), Bigint.new(private_key) or ""
end

-- function get(msg)
-- 	local	port_path = key_dir.."/"..msg.port
-- 	local	id_path = port_path.."/"..msg.senderId

-- 	if not fs.exists(port_path) then return nil end

-- 	founded = false
-- 	id_str = msg.senderId
-- 	for _, file in pairs(fs.list(port_path)) do
-- 		if file == tostring(id_str) then
-- 			founded = true
-- 			break
-- 		end
-- 	end

-- 	if not founded then return nil end

-- 	local h = fs.open(id_path, "r")
-- 	key = h.readLine()
-- 	h.close()
-- 	return key
-- end

-- function create(msg)
-- 	local	key = string.format("%.16f", msg.senderDistance)
-- 	local	port_path = key_dir.."/"..msg.port
-- 	local	id_path = port_path.."/"..msg.senderId

-- 	if not fs.exists(port_path) then fs.makeDir(port_path) end
-- 	if fs.exists(id_path) then return 1 end
-- 	local h = fs.open(id_path, "w")
-- 	h.write(key)
-- 	h.close()
-- 	return false
-- end

-- function	check(msg)
-- 	if msg.senderDistance == nil then
-- 		return 3
-- 	end
-- 	local	key = string.format("%.16f", msg.senderDistance)

-- 	local	key_status = get(msg)
-- 	if key_status == nil then
-- 		if create(msg) then
-- 			return 2
-- 		end
-- 		return 1
-- 	end
-- 	if key_status == key then
-- 		return 0
-- 	end
-- 	return 3
-- end

-- function	is_msg_secure(msg)
-- 	return msg.is_secure == 0 or msg.is_secure == 1
-- end
